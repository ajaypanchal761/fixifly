#!/usr/bin/env node

/**
 * Fix Razorpay Session Token Issue
 * This script helps generate a fresh Razorpay order and session token
 */

require('dotenv').config({ path: './config/production.env' });
const Razorpay = require('razorpay');

console.log('üîß Razorpay Session Token Fix');
console.log('==============================');

// Initialize Razorpay
let razorpay;
try {
  razorpay = new Razorpay({
    key_id: process.env.RAZORPAY_KEY_ID,
    key_secret: process.env.RAZORPAY_KEY_SECRET,
  });
  console.log('‚úÖ Razorpay instance created successfully');
} catch (error) {
  console.error('‚ùå Failed to create Razorpay instance:', error.message);
  process.exit(1);
}

// Generate a fresh order and session token
async function generateFreshOrder() {
  try {
    console.log('\nüîÑ Generating fresh Razorpay order...');
    
    const orderData = {
      amount: 100, // 1 INR in paise for testing
      currency: 'INR',
      receipt: `test_receipt_${Date.now()}`,
      notes: {
        test: true,
        generated_at: new Date().toISOString(),
        purpose: 'session_token_fix'
      }
    };
    
    console.log('Creating order with data:', orderData);
    
    const order = await razorpay.orders.create(orderData);
    
    console.log('‚úÖ Fresh order created successfully:');
    console.log('   Order ID:', order.id);
    console.log('   Amount:', order.amount);
    console.log('   Currency:', order.currency);
    console.log('   Status:', order.status);
    console.log('   Receipt:', order.receipt);
    console.log('   Created At:', order.created_at);
    
    // For Razorpay Standard Checkout, you need to use the order ID
    // The session token is generated by Razorpay's frontend SDK
    console.log('\nüìã Next Steps:');
    console.log('1. Use this Order ID in your frontend:', order.id);
    console.log('2. Generate a new session token using Razorpay\'s frontend SDK');
    console.log('3. The session token will be different from the one that failed');
    console.log('4. Test the payment flow with the new order and session token');
    
    return order;
    
  } catch (error) {
    console.error('‚ùå Failed to create fresh order:');
    console.error('   Error:', error.message);
    console.error('   Status:', error.statusCode);
    console.error('   Details:', error.error);
    throw error;
  }
}

// Provide troubleshooting steps
function provideTroubleshootingSteps() {
  console.log('\nüõ†Ô∏è  Troubleshooting Steps:');
  console.log('1. Clear browser cache and cookies');
  console.log('2. Generate a new Razorpay order (done above)');
  console.log('3. Use the new order ID in your frontend');
  console.log('4. Ensure you\'re using the correct Razorpay key ID');
  console.log('5. Check that your Razorpay account is active');
  console.log('6. Verify you\'re using test keys for test environment');
  
  console.log('\nüîç Common Issues:');
  console.log('- Session tokens expire after a certain time');
  console.log('- Using live keys in test environment or vice versa');
  console.log('- Invalid order ID or malformed session token');
  console.log('- Razorpay account restrictions or limits');
  
  console.log('\nüìû If issues persist:');
  console.log('1. Check Razorpay dashboard for any account issues');
  console.log('2. Contact Razorpay support with the error details');
  console.log('3. Review Razorpay integration documentation');
  console.log('4. Test with Razorpay\'s test cards and scenarios');
}

// Run the fix
async function runFix() {
  try {
    const order = await generateFreshOrder();
    provideTroubleshootingSteps();
    
    console.log('\n‚úÖ Fix completed successfully');
    console.log('Use the new Order ID above to generate a fresh session token');
    
  } catch (error) {
    console.error('\n‚ùå Fix failed:', error.message);
    process.exit(1);
  }
}

runFix();
