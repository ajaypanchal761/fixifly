const mongoose = require('mongoose');

const amcSubscriptionSchema = new mongoose.Schema({
  // Subscription ID
  subscriptionId: {
    type: String,
    required: false, // Will be auto-generated by pre-save middleware
    unique: true
  },
  
  // User Information
  userId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'User',
    required: true
  },
  
  // Plan Information
  planId: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'AMCPlan',
    required: true
  },
  
  // Subscription Details
  planName: {
    type: String,
    required: true,
    trim: true
  },
  
  planPrice: {
    type: Number,
    required: true,
    min: 0
  },
  
  // Payment Information
  amount: {
    type: Number,
    required: true,
    min: 0
  },
  
  currency: {
    type: String,
    default: 'INR',
    enum: ['INR', 'USD', 'EUR']
  },
  
  paymentMethod: {
    type: String,
    enum: ['online', 'cash', 'card', 'upi', 'netbanking'],
    required: true
  },
  
  paymentStatus: {
    type: String,
    enum: ['pending', 'completed', 'failed', 'refunded', 'cancelled'],
    default: 'pending'
  },
  
  paymentId: {
    type: String,
    default: null
  },
  
  razorpayOrderId: {
    type: String,
    default: null
  },
  
  razorpayPaymentId: {
    type: String,
    default: null
  },
  
  razorpaySignature: {
    type: String,
    default: null
  },
  
  paymentDetails: {
    type: Object,
    default: null
  },
  
  transactionId: {
    type: String,
    default: null
  },
  
  // Subscription Status
  status: {
    type: String,
    enum: ['active', 'inactive', 'expired', 'cancelled', 'suspended'],
    default: 'active'
  },
  
  // Subscription Dates
  startDate: {
    type: Date,
    required: true,
    default: Date.now
  },
  
  endDate: {
    type: Date,
    required: false // Will be auto-calculated by pre-save middleware
  },
  
  nextBillingDate: {
    type: Date,
    default: null
  },
  
  // Device Information
  devices: [{
    deviceType: {
      type: String,
      enum: ['laptop', 'desktop', 'printer', 'mobile', 'tablet', 'other'],
      required: true
    },
    serialNumber: {
      type: String,
      required: true,
      trim: true
    },
    modelNumber: {
      type: String,
      required: true,
      trim: true
    },
    brand: {
      type: String,
      trim: true
    },
    serialNumberPhoto: {
      type: String,
      default: null
    },
    isActive: {
      type: Boolean,
      default: true
    },
    addedAt: {
      type: Date,
      default: Date.now
    }
  }],
  
  // Usage Tracking
  usage: {
    callSupport: {
      used: {
        type: Number,
        default: 0
      },
      limit: {
        type: String,
        default: 'unlimited'
      }
    },
    remoteSupport: {
      used: {
        type: Number,
        default: 0
      },
      limit: {
        type: String,
        default: 'unlimited'
      }
    },
    homeVisits: {
      used: {
        type: Number,
        default: 0
      },
      limit: {
        type: Number,
        default: 0
      },
      remaining: {
        type: Number,
        default: 0
      }
    },
    antivirus: {
      activated: {
        type: Boolean,
        default: false
      },
      activationDate: {
        type: Date,
        default: null
      },
      expiryDate: {
        type: Date,
        default: null
      }
    },
    sparePartsDiscount: {
      used: {
        type: Number,
        default: 0
      },
      limit: {
        type: Number,
        default: 0
      }
    },
    freeSpareParts: {
      used: {
        type: Number,
        default: 0
      },
      limit: {
        type: Number,
        default: 0
      },
      remaining: {
        type: Number,
        default: 0
      }
    },
    warrantyClaims: {
      used: {
        type: Number,
        default: 0
      },
      limit: {
        type: Number,
        default: 3
      },
      remaining: {
        type: Number,
        default: 3
      }
    }
  },
  
  // Service History
  serviceHistory: [{
    serviceId: {
      type: String,
      required: true
    },
    serviceType: {
      type: String,
      enum: ['call_support', 'remote_support', 'home_visit', 'repair', 'maintenance'],
      required: true
    },
    deviceId: {
      type: String,
      required: true
    },
    description: {
      type: String,
      required: true,
      trim: true
    },
    status: {
      type: String,
      enum: ['pending', 'in_progress', 'completed', 'cancelled'],
      default: 'pending'
    },
    serviceDate: {
      type: Date,
      required: true
    },
    completedDate: {
      type: Date,
      default: null
    },
    technicianId: {
      type: mongoose.Schema.Types.ObjectId,
      ref: 'Vendor',
      default: null
    },
    cost: {
      type: Number,
      default: 0
    },
    notes: {
      type: String,
      trim: true
    }
  }],
  
  // Renewal Information
  autoRenewal: {
    enabled: {
      type: Boolean,
      default: false
    },
    nextRenewalDate: {
      type: Date,
      default: null
    }
  },
  
  // Cancellation Information
  cancellation: {
    requestedAt: {
      type: Date,
      default: null
    },
    cancelledAt: {
      type: Date,
      default: null
    },
    reason: {
      type: String,
      trim: true
    },
    refundAmount: {
      type: Number,
      default: 0
    },
    refundStatus: {
      type: String,
      enum: ['pending', 'processed', 'failed'],
      default: null
    }
  },
  
  // Notifications
  notifications: {
    renewalReminder: {
      sent: {
        type: Boolean,
        default: false
      },
      sentAt: {
        type: Date,
        default: null
      }
    },
    expiryWarning: {
      sent: {
        type: Boolean,
        default: false
      },
      sentAt: {
        type: Date,
        default: null
      }
    }
  },
  
  // Admin Information
  createdBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Admin',
    default: null
  },
  
  lastModifiedBy: {
    type: mongoose.Schema.Types.ObjectId,
    ref: 'Admin',
    default: null
  },
  
  // Additional Information
  notes: {
    type: String,
    trim: true
  },
  
  // Subscription Metadata
  metadata: {
    source: {
      type: String,
      enum: ['web', 'mobile', 'admin', 'api'],
      default: 'web'
    },
    userAgent: {
      type: String,
      trim: true
    },
    ipAddress: {
      type: String,
      trim: true
    }
  }
}, {
  timestamps: true
});

// Indexes
amcSubscriptionSchema.index({ subscriptionId: 1 });
amcSubscriptionSchema.index({ userId: 1 });
amcSubscriptionSchema.index({ planId: 1 });
amcSubscriptionSchema.index({ status: 1 });
amcSubscriptionSchema.index({ startDate: -1 });
amcSubscriptionSchema.index({ endDate: 1 });
amcSubscriptionSchema.index({ paymentStatus: 1 });
amcSubscriptionSchema.index({ createdAt: -1 });

// Compound indexes
amcSubscriptionSchema.index({ userId: 1, status: 1 });
amcSubscriptionSchema.index({ planId: 1, status: 1 });
amcSubscriptionSchema.index({ endDate: 1, status: 1 });

// Virtual for days remaining
amcSubscriptionSchema.virtual('daysRemaining').get(function() {
  if (this.status !== 'active') return 0;
  const now = new Date();
  const end = new Date(this.endDate);
  const diffTime = end - now;
  const diffDays = Math.ceil(diffTime / (1000 * 60 * 60 * 24));
  return Math.max(0, diffDays);
});

// Virtual for is expired
amcSubscriptionSchema.virtual('isExpired').get(function() {
  return new Date() > new Date(this.endDate);
});

// Virtual for is active
amcSubscriptionSchema.virtual('isActive').get(function() {
  return this.status === 'active' && !this.isExpired;
});

// Virtual for formatted amount
amcSubscriptionSchema.virtual('formattedAmount').get(function() {
  return `â‚¹${this.amount}`;
});

// Pre-save middleware to generate subscription ID
amcSubscriptionSchema.pre('save', async function(next) {
  // Always generate subscription ID for new documents
  if (this.isNew && !this.subscriptionId) {
    try {
      // Use atomic counter to avoid duplicates under concurrency
      const Counter = require('./Counter');
      let counterDoc = await Counter.findOneAndUpdate(
        { key: 'amc_subscription' },
        { $inc: { seq: 1 } },
        { upsert: true, new: true }
      );

      // If counter just initialized and there are existing subscriptions, align sequence
      if (counterDoc.seq === 1) {
        const latest = await this.constructor
          .findOne({ subscriptionId: { $exists: true } })
          .sort({ subscriptionId: -1 })
          .select('subscriptionId')
          .lean();
        if (latest && typeof latest.subscriptionId === 'string') {
          const match = latest.subscriptionId.match(/AMC(\d+)/);
          const maxSeq = match ? parseInt(match[1], 10) : 0;
          if (maxSeq >= 1) {
            // Set counter to maxSeq and fetch next atomically
            await Counter.updateOne({ key: 'amc_subscription' }, { $set: { seq: maxSeq } });
            counterDoc = await Counter.findOneAndUpdate(
              { key: 'amc_subscription' },
              { $inc: { seq: 1 } },
              { new: true }
            );
          }
        }
      }

      const nextSeq = counterDoc.seq;
      this.subscriptionId = `AMC${String(nextSeq).padStart(6, '0')}`;
      console.log('Generated subscriptionId (counter):', this.subscriptionId);
    } catch (err) {
      console.error('Failed to generate subscriptionId via counter:', err);
      return next(err);
    }
  }
  
  // Always calculate end date for new documents
  if (this.isNew && !this.endDate) {
    const startDate = new Date(this.startDate || Date.now());
    const endDate = new Date(startDate);
    endDate.setFullYear(endDate.getFullYear() + 1); // Default 1 year
    this.endDate = endDate;
    console.log('Generated endDate:', this.endDate);
  }
  
  // Update usage limits based on plan
  if (this.isNew && this.planId) {
    const plan = await this.constructor.model('AMCPlan').findById(this.planId);
    if (plan) {
      this.usage.homeVisits.limit = plan.benefits.homeVisits.count;
      this.usage.homeVisits.remaining = plan.benefits.homeVisits.count;
      this.usage.freeSpareParts.limit = plan.benefits.freeSpareParts.amount;
      this.usage.freeSpareParts.remaining = plan.benefits.freeSpareParts.amount;
      
      // Initialize warranty claims if not set
      if (this.usage.warrantyClaims.limit === 0) {
        this.usage.warrantyClaims.limit = 3; // Default to 3 warranty claims
        this.usage.warrantyClaims.remaining = 3;
      }
    }
  }
  
  next();
});

// Static method to get active subscriptions
amcSubscriptionSchema.statics.getActiveSubscriptions = function() {
  return this.find({ 
    status: 'active',
    endDate: { $gt: new Date() }
  }).populate('userId planId');
};

// Static method to get expiring subscriptions
amcSubscriptionSchema.statics.getExpiringSubscriptions = function(days = 30) {
  const futureDate = new Date();
  futureDate.setDate(futureDate.getDate() + days);
  
  return this.find({
    status: 'active',
    endDate: { 
      $gte: new Date(),
      $lte: futureDate
    }
  }).populate('userId planId');
};

// Static method to get subscription statistics
amcSubscriptionSchema.statics.getSubscriptionStats = function() {
  return this.aggregate([
    {
      $group: {
        _id: '$status',
        count: { $sum: 1 },
        totalRevenue: { $sum: '$amount' }
      }
    }
  ]);
};

// Instance method to add service
amcSubscriptionSchema.methods.addService = function(serviceData) {
  this.serviceHistory.push({
    ...serviceData,
    serviceId: `SRV${Date.now()}${Math.random().toString(36).substr(2, 5)}`
  });
  
  // Update usage based on service type
  if (serviceData.serviceType === 'call_support') {
    this.usage.callSupport.used += 1;
  } else if (serviceData.serviceType === 'remote_support') {
    this.usage.remoteSupport.used += 1;
  } else if (serviceData.serviceType === 'home_visit') {
    this.usage.homeVisits.used += 1;
    this.usage.homeVisits.remaining = Math.max(0, this.usage.homeVisits.remaining - 1);
  }
  
  return this.save();
};

// Instance method to cancel subscription
amcSubscriptionSchema.methods.cancelSubscription = function(reason, refundAmount = 0) {
  this.status = 'cancelled';
  this.cancellation.requestedAt = new Date();
  this.cancellation.cancelledAt = new Date();
  this.cancellation.reason = reason;
  this.cancellation.refundAmount = refundAmount;
  this.cancellation.refundStatus = refundAmount > 0 ? 'pending' : null;
  
  return this.save();
};

// Instance method to renew subscription
amcSubscriptionSchema.methods.renewSubscription = function(period = 365) {
  const currentEndDate = new Date(this.endDate);
  const newEndDate = new Date(currentEndDate);
  newEndDate.setDate(newEndDate.getDate() + period);
  
  this.endDate = newEndDate;
  this.status = 'active';
  this.autoRenewal.nextRenewalDate = newEndDate;
  
  // Reset usage for new period
  this.usage.homeVisits.remaining = this.usage.homeVisits.limit;
  this.usage.freeSpareParts.remaining = this.usage.freeSpareParts.limit;
  this.usage.warrantyClaims.remaining = this.usage.warrantyClaims.limit;
  
  return this.save();
};

module.exports = mongoose.model('AMCSubscription', amcSubscriptionSchema);

